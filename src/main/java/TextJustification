public class TextJustification {
    public String justify(String words[], int width) {
        int n = words.length;
        int cost[][] = new int[n][n];

        for (int i = 0; i < n; i++) {
            cost[i][i] = width - words[i].length();
            for (int j = i + 1; j < n; j++) {
                cost[i][j] = cost[i][j - 1] - words[j].length() - 1;
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (cost[i][j] < 0) {
                    cost[i][j] = Integer.MAX_VALUE;
                } else {
                    cost[i][j] = (int) Math.pow(cost[i][j], 2);
                }
            }
        }

        int minCost[] = new int[n];
        int result[] = new int[n];
        for (int i = n - 1; i >= 0; i--) {
            for (int j = n - 1; j >= i; j--) {
                if (j == n - 1) {
                    minCost[i] = cost[i][j];
                    result[i] = j + 1;
                } else if (cost[i][j] != Integer.MAX_VALUE) {
                    int curCost = cost[i][j] + minCost[j + 1];
                    if (curCost < minCost[i]) {
                        minCost[i] = curCost;
                        result[i] = j + 1;
                    }
                }
            }
        }
        StringBuilder builder = printResult(words, minCost[0], result);

        return builder.toString();
    }

    private StringBuilder printResult(String[] words, int minCost, int[] result) {
        int i = 0, n = words.length, j;

        System.out.println("Minimum cost is " + minCost);
        System.out.println("\n");

        StringBuilder builder = new StringBuilder();
        do {
            j = result[i];
            for (int k = i; k < j; k++) {
                builder.append(words[k]).append(" ");
            }
            builder.append("\n");
            i = j;
        } while (j < n);
        return builder;
    }

    public static void main(String args[]) {
        String words1[] = {"TUSHAR", "ROY", "LIKES", "TO", "CODE"};
        TextJustification awl = new TextJustification();
        System.out.println(awl.justify(words1, 10));
    }
}
